# Remove the line below if you want to inherit .editorconfig settings from higher directories
root = true

# All Files
[*]
charset = utf-8
indent_style = space
indent_size = 4
insert_final_newline = true
trim_trailing_whitespace = true
max_line_length = off

# Visual Studio Solution Files
[*.sln]
indent_style = tab

# XML Project Files
[*.{csproj,vbproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# XML Configuration Files
[*.{xml,config,props,targets,nuspec,resx,ruleset,vsixmanifest,vsct}]
indent_size = 2

#### .NET Language Conventions ####
# https://docs.microsoft.com/visualstudio/ide/editorconfig-language-conventions

# .NET Code Style Settings
[*.{cs,csx,cake,vb,vbx}]

# New line preferences
end_of_line = crlf

# Organize usings
dotnet_separate_import_directive_groups = false
dotnet_sort_system_directives_first = true

# this. and Me. preferences
dotnet_style_qualification_for_event = false : warning
dotnet_style_qualification_for_field = false : warning
dotnet_style_qualification_for_method = false : warning
dotnet_style_qualification_for_property = false : warning

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true : error
dotnet_style_predefined_type_for_member_access = true : error

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity : warning
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity : warning
dotnet_style_parentheses_in_other_operators = always_for_clarity : warning
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity : warning

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members : error

# Expression-level preferences
dotnet_style_coalesce_expression = true : suggestion
dotnet_style_collection_initializer = true : warning
dotnet_style_explicit_tuple_names = true : suggestion
dotnet_style_null_propagation = true : suggestion
dotnet_style_object_initializer = true : warning
dotnet_style_prefer_auto_properties = true : warning
dotnet_style_prefer_compound_assignment = true : suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_return = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true : suggestion
dotnet_style_prefer_inferred_tuple_names = true : suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true : suggestion

# Field preferences
dotnet_style_readonly_field = true : warning

# Parameter preferences
dotnet_code_quality_unused_parameters = all : suggestion

#### C# Coding Conventions ####

# var preferences
csharp_style_var_elsewhere = false:none
csharp_style_var_for_built_in_types = false:none
csharp_style_var_when_type_is_apparent = true:none

# Expression-bodied members
csharp_style_expression_bodied_accessors = true : warning
csharp_style_expression_bodied_constructors = false : silent
csharp_style_expression_bodied_indexers = true : warning
csharp_style_expression_bodied_lambdas = true : silent
csharp_style_expression_bodied_local_functions = false : silent
csharp_style_expression_bodied_methods = false : warning
csharp_style_expression_bodied_operators = false : silent
csharp_style_expression_bodied_properties = true : suggestion

# Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true : warning
csharp_style_pattern_matching_over_is_with_cast_check = true : warning
csharp_style_prefer_switch_expression = true : suggestion

# Null-checking preferences
csharp_style_conditional_delegate_call = true : suggestion

# Modifier preferences
csharp_prefer_static_local_function = true : warning
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async

# Code-block preferences
csharp_prefer_braces = true : warning
csharp_prefer_simple_using_statement = true : suggestion

# Expression-level preferences
csharp_prefer_simple_default_expression = true : suggestion
csharp_style_deconstructed_variable_declaration = true : suggestion
csharp_style_inlined_variable_declaration = true : suggestion
csharp_style_pattern_local_over_anonymous_function = true : suggestion
csharp_style_prefer_index_operator = true : suggestion
csharp_style_prefer_range_operator = true : suggestion
csharp_style_throw_expression = true : suggestion
csharp_style_unused_value_assignment_preference = discard_variable : suggestion
csharp_style_unused_value_expression_statement_preference = discard_variable : silent

# 'using' directive preferences
csharp_using_directive_placement = inside_namespace : error

# New line preferences
csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = all
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_labels = no_change
csharp_indent_switch_labels = true

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true

#### Naming conventions ####
# https://docs.microsoft.com/visualstudio/ide/editorconfig-naming-conventions

# Non-private static fields are PascalCase
dotnet_naming_rule.rule_non_private_static_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.rule_non_private_static_fields_should_be_pascal_case.symbols = symbols_non_private_static_fields
dotnet_naming_rule.rule_non_private_static_fields_should_be_pascal_case.style = style_non_private_static_fields

dotnet_naming_symbols.symbols_non_private_static_fields.applicable_kinds = field
dotnet_naming_symbols.symbols_non_private_static_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.symbols_non_private_static_fields.required_modifiers = static

dotnet_naming_style.style_non_private_static_fields.capitalization = pascal_case

# Non-private readonly fields are PascalCase
dotnet_naming_rule.rule_non_private_readonly_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.rule_non_private_readonly_fields_should_be_pascal_case.symbols = symbols_non_private_readonly_fields
dotnet_naming_rule.rule_non_private_readonly_fields_should_be_pascal_case.style = style_non_private_readonly_fields

dotnet_naming_symbols.symbols_non_private_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.symbols_non_private_readonly_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.symbols_non_private_readonly_fields.required_modifiers = readonly

dotnet_naming_style.style_non_private_readonly_fields.capitalization = pascal_case

# Constants are PascalCase
dotnet_naming_rule.rule_constants_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.rule_constants_should_be_pascal_case.symbols = symbol_constants
dotnet_naming_rule.rule_constants_should_be_pascal_case.style = style_constants

dotnet_naming_symbols.symbol_constants.applicable_kinds = field, local
dotnet_naming_symbols.symbol_constants.required_modifiers = const

dotnet_naming_style.style_constants.capitalization = pascal_case

# All public/protected/protected_internal static readonly fields must be PascalCase
dotnet_naming_rule.rule_public_protected_static_readonly_fields_should_be_pascal_case.symbols    = symbol_public_protected_static_readonly_fields
dotnet_naming_rule.rule_public_protected_static_readonly_fields_should_be_pascal_case.style      = style_public_protected_static_readonly_fields
dotnet_naming_rule.rule_public_protected_static_readonly_fields_should_be_pascal_case.severity   = warning

dotnet_naming_symbols.symbol_public_protected_static_readonly_fields.applicable_accessibilities = public, protected, protected_internal
dotnet_naming_symbols.symbol_public_protected_static_readonly_fields.required_modifiers         = static, readonly
dotnet_naming_symbols.symbol_public_protected_static_readonly_fields.applicable_kinds           = field

dotnet_naming_style.style_public_protected_static_readonly_fields.capitalization = pascal_case

# Instance fields are camelCase and start with _
dotnet_naming_rule.rule_instance_fields_should_be_camel_case.severity = suggestion
dotnet_naming_rule.rule_instance_fields_should_be_camel_case.symbols = symbols_instance_fields
dotnet_naming_rule.rule_instance_fields_should_be_camel_case.style = style_instance_fields

dotnet_naming_symbols.symbols_instance_fields.applicable_kinds = field

dotnet_naming_style.style_instance_fields.capitalization = camel_case
dotnet_naming_style.style_instance_fields.required_prefix = _

# Locals and parameters are camelCase
dotnet_naming_rule.rule_locals_should_be_camel_case.severity = suggestion
dotnet_naming_rule.rule_locals_should_be_camel_case.symbols = symbols_locals
dotnet_naming_rule.rule_locals_should_be_camel_case.style = style_locals

dotnet_naming_symbols.symbols_locals.applicable_kinds = parameter, local

dotnet_naming_style.style_locals.capitalization = camel_case

# Local functions are PascalCase
dotnet_naming_rule.rule_local_functions_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.rule_local_functions_should_be_pascal_case.symbols = symbols_local_functions_should_be_pascal_case
dotnet_naming_rule.rule_local_functions_should_be_pascal_case.style = style_local_functions_should_be_pascal_case

dotnet_naming_symbols.symbols_local_functions_should_be_pascal_case.applicable_kinds = local_function

dotnet_naming_style.style_local_functions_should_be_pascal_case.capitalization = pascal_case

# By default, name items with PascalCase
dotnet_naming_rule.rule_members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.rule_members_should_be_pascal_case.symbols = symbol_members
dotnet_naming_rule.rule_members_should_be_pascal_case.style = style_members

dotnet_naming_symbols.symbol_members.applicable_kinds = *

dotnet_naming_style.style_members.capitalization = pascal_case

# Interfaces should begins with I
dotnet_naming_rule.rule_interface_should_begin_prefix.severity = error
dotnet_naming_rule.rule_interface_should_begin_prefix.symbols = symbols_interface
dotnet_naming_rule.rule_interface_should_begin_prefix.style = style_interface

dotnet_naming_symbols.symbols_interface.applicable_kinds = interface
dotnet_naming_symbols.symbols_interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected

dotnet_naming_style.style_interface.required_prefix = I
dotnet_naming_style.style_interface.capitalization = pascal_case

# Async methods should end with Async suffix
dotnet_naming_rule.rule_async_methods_should_end_suffix.severity = error
dotnet_naming_rule.rule_async_methods_should_end_suffix.symbols = symbols_async_methods
dotnet_naming_rule.rule_async_methods_should_end_suffix.style = style_async_methods

dotnet_naming_symbols.symbols_async_methods.applicable_kinds = method
dotnet_naming_symbols.symbols_async_methods.applicable_accessibilities = *
dotnet_naming_symbols.symbols_async_methods.required_modifiers = async

dotnet_naming_symbols.symbols_non_public_async_methods.applicable_kinds = method
dotnet_naming_symbols.symbols_non_public_async_methods.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.symbols_non_public_async_methods.required_modifiers = async

dotnet_naming_style.style_async_methods.required_suffix = Async
dotnet_naming_style.style_async_methods.capitalization = pascal_case

# Generics Type Parameters use PascalCase and are prefixed with uppercase 'T'
dotnet_naming_rule.rule_type_parameter.severity             = error
dotnet_naming_rule.rule_type_parameter.symbols              = symbols_type_parameter
dotnet_naming_rule.rule_type_parameter.style                = style_type_parameter

dotnet_naming_symbols.symbols_type_parameter.applicable_kinds = type_parameter

dotnet_naming_style.style_type_parameter.capitalization = pascal_case
dotnet_naming_style.style_type_parameter.required_prefix = T

# .NET Code Style Settings for TEST
[*Test*.cs]

# Async methods should end with Async suffix (not for public methods, those are the test methos)
dotnet_naming_rule.rule_async_methods_should_end_suffix.symbols = symbols_non_public_async_methods
